#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Chanjo - Clinical genomics coverage analysis tool

Usage:
  chanjo build <sql_db> [<reference>] [--dialect=STR] [--force]
  chanjo annotate <sql_db> <bam_file> [--cutoff=INT] [--extend-by=INT]
    [--dialect=STR] [--sample=STR] [--group=STR] [--contig-prepend=STR]
    [--threshold=INT] [--cores=INT] [--config=FILE] [--force]
  chanjo import <sql_db> [<annotate_output>] [--dialect=STR] [--json]
  chanjo read <bam_file> <contig> <start> <end> [--cutoff=INT]
    [--dialect=STR]
  chanjo peek <sql_db> <gene>... [--sample=STR] [--group=STR]
    [--dialect=STR]
  chanjo -h | --help
  chanjo -v | --version

Commands:
  build                Builds a new skeleton SQL interval store
  annotate             Annotate intervals in an existing database
  import               Import coverage annotations to an existing database
  read                 Read and calculate coverage directly from a BAM-file
  peek                 Peek at annotated coverage metrics for supersets/genes

Arguments:
  <sql_db>             Path to new or existing SQL database (path or URI)
  <bam_file>           Path to 'coverage source' BAM-file ('./snap/align.bam')
  <reference>          Path to intervals reference dump (CCDS database)
  <gene>               List of HGNC gene symbols
  <annotate_output>    Output-file from 'annotate' command (or stdin)
  <contig>             Contig (chromosome) ID e.g. 'chr2'
  <start>              Starting interval position (1-based)
  <end>                Ending interval position (1-based)

Options:
  -h --help            Show this screen
  -v --version         Show version
  -c --cutoff=INT      Cutoff for completeness calculation [default: 10]
  -d --dialect=STR     Type of database: sqlite/mysql/BED [default: sqlite]
  -e --extend-by=INT   Extend intervals to include e.g. splice sites, +/- 2 bp
                       [default: 0]
  -s --sample=STR      Sample ID e.g. '0-0-0U' (or set automatically)
  -g --group=STR       Group ID e.g. to group samples in trios
  -t --threshold=INT   Base pair threshold for optimizing BAM-file reading
                       [default: 17000]
  -o --cores=INT       The maximum number of CPU cores to use
  -f --force           Overwrite existing files without warning
  -p --contig-prepend=STR   Prepend a string to each contig ID (USCS/Ensemble)
                       [default: ]
  -u --config=FILE     Path to YAML/JSON config file [default: global,local]
  -j --json            Import legacy JSON 'annotate' output file
"""

import json
import multiprocessing
import sys

from docopt import docopt
from clint.textui import puts, colored
from path import path

import chanjo
from chanjo.core import annotate, build, import_data, import_json
from chanjo.core import read_coverage, peek, id_generator, open_or_stdin


def main(args):
  # +------------------------------------------------------------------+
  # | Pre-process input arguments
  # +------------------------------------------------------------------+
  store_path = args['<sql_db>']
  coverage_path = args['<bam_file>']
  dialect = args['--dialect']
  # Load user defined sample Id or generate one randomly
  sample_id = args['--sample'] or id_generator()
  group_id = args['--group']
  force = args['--force']

  try:
    cutoff = int(args['--cutoff'])
  except ValueError, e:
    # Cutoff must be an integer!
    raise e

  # +------------------------------------------------------------------+
  # | Read an interval from a coverage source file (BAM)
  # +------------------------------------------------------------------+
  if args['read']:
    contig_id = args['<contig>']

    try:
      start = int(args['<start>'])
      end = int(args['<end>'])
    except ValueError, e:
      # Start and end must be integers!
      raise e

    # Read and calculate coverage metrics
    _ = read_coverage(coverage_path, contig_id, start, end, cutoff)

  # +------------------------------------------------------------------+
  # | Peek at annotated coverage metrics for supersets/genes
  # +------------------------------------------------------------------+
  elif args['peek']:
    # Fetch the annotations from a data store, SQL database
    _ = peek(store_path, args['<gene>'], sample_id, dialect)

  # +------------------------------------------------------------------+
  # | Annotate intervals in an interval store
  # +------------------------------------------------------------------+
  elif args['annotate']:
    try:
      extension = int(args['--extend-by'])
      bp_threshold = int(args['--threshold'])
      prepend = args['--contig-prepend']
    except ValueError, e:
      # Extension and bp threshold must be integers
      raise e

    # Use user defined number of cores or all that are available
    cores = int(args['--cores'] or multiprocessing.cpu_count())

    # Call main annotate function
    _ = annotate(sample_id, group_id, cutoff, coverage_path, store_path,
                 dialect, extension, prepend, bp_threshold)

  # +------------------------------------------------------------------+
  # | Import coverage annotations to an interval store
  # +------------------------------------------------------------------+
  elif args['import']:
    if args['--json']:
      # Import legacy JSON 'annotate' file with convertion to new format
      import_func = import_json
    else:
      import_func = import_data

    # Read from user defined file or piped standard in
    with open_or_stdin(args['<annotate_output>']) as input_stream:
      _ = import_func(store_path, input_stream, dialect)

  # +------------------------------------------------------------------+
  # | Builds a new skeleton SQL interval store
  # +------------------------------------------------------------------+
  elif args['build']:
    # Read CCDS reference file and import to a fresh SQL datastore
    success = build(store_path, args['<reference>'], dialect, force=force)

    if success:
      puts(colored.blue('[chanjo]') + ' Built database: ' +
           colored.green(store_path))


if __name__ == '__main__':
  # Parse docstring defined command line arguments
  args = docopt(__doc__, version='Chanjo v' + chanjo.__version__)

  # # Determine config file scope
  # scopes = args['--config'].split(',')

  # # If found, parse config files
  # options = rc.extend_args(args, __file__, defaults, scopes=scopes)

  main(args)
